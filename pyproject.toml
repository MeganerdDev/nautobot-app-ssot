[tool.poetry]
name = "nautobot-ssot"
version = "2.0.2"
description = "Nautobot Single Source of Truth"
authors = ["Network to Code, LLC <opensource@networktocode.com>"]
license = "Apache-2.0"
readme = "README.md"
homepage = "https://github.com/nautobot/nautobot-app-ssot/"
repository = "https://github.com/nautobot/nautobot-app-ssot/"
keywords = ["nautobot", "nautobot-plugin", "nautobot-app"]
classifiers = [
    "Intended Audience :: Developers",
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
include = [
    "LICENSE",
    "README.md",
]
packages = [
    { include = "nautobot_ssot" },
]

[tool.poetry.dependencies]
python = ">=3.8,<3.12"
# Used for local development
nautobot = "^2.0.0"
diffsync = "^1.6.0"
Jinja2 = { version = ">=2.11.3", optional = true }
Markdown = "!=3.3.5"
PyYAML = { version = ">=6", optional = true }
cloudvision = { version = "^1.9.0", optional = true }
cvprac = { version = "^1.2.2", optional = true }
dnspython = { version = "^2.1.0", optional = true }
nautobot-device-lifecycle-mgmt = { version = "^2.0.0", optional = true }
packaging = ">=21.3, <24"
prometheus-client = "~0.17.1"
ijson = { version = ">=2.5.1", optional = true }
ipfabric = { version = "~6.0.9", optional = true }
ipfabric-diagrams = { version = "~6.0.2", optional = true }
netutils = { version = "^1.0.0", optional = true }
oauthlib = { version = ">=3.1.0", optional = true }
python-magic = { version = ">=0.4.15", optional = true }
pytz = { version = ">=2019.3", optional = true }
requests = { version = ">=2.21.0", optional = true }
requests-oauthlib = { version = ">=1.3.0", optional = true }
six = { version = ">=1.13.0", optional = true }
drf-spectacular = "0.26.3"
httpx = { version = ">=0.23.3", optional = true }

[tool.poetry.group.dev.dependencies]
bandit = "*"
coverage = "*"
django-debug-toolbar = "*"
django-extensions = "*"
invoke = "*"
ipython = "*"
jedi = "^0.17.2"
pylint = "*"
pylint-django = "*"
pylint-nautobot = "*"
yamllint = "*"
markdown-include = "*"
toml = "*"
Markdown = "*"
# Rendering docs to HTML
mkdocs = "1.5.2"
# Material for MkDocs theme
mkdocs-material = "9.1.15"
# Render custom markdown for version added/changed/remove notes
mkdocs-version-annotations = "1.0.0"
# Automatic documentation from sources, for MkDocs
mkdocstrings = "0.22.0"
mkdocstrings-python = "1.5.2"
requests-mock = "^1.10.0"
parameterized = "^0.8.1"
myst-parser = "^0.15.2"
nautobot-chatops = { version = "^3.0.0", extras = ["ipfabric"] }
responses = "^0.14.0"
ruff = "^0.1.11"

[tool.poetry.plugins."nautobot_ssot.data_sources"]
"example" = "nautobot_ssot.sync.example:ExampleSyncWorker"

[tool.poetry.plugins."nautobot_ssot.data_targets"]
"example" = "nautobot_ssot.sync.example:ExampleSyncWorker"

[tool.poetry.plugins."nautobot.workers"]
"ipfabric" = "nautobot_ssot.integrations.ipfabric.workers:ipfabric"

[tool.poetry.extras]
aci = [
    "PyYAML",
]
all = [
    "Jinja2",
    "PyYAML",
    "cloudvision",
    "cvprac",
    "dnspython",
    "ijson",
    "ipfabric",
    "ipfabric-diagrams",
    "nautobot-device-lifecycle-mgmt",
    "netutils",
    "oauthlib",
    "python-magic",
    "pytz",
    "requests",
    "requests-oauthlib",
    "six",
]
aristacv = [
    "cloudvision",
    "cvprac",
]
device42 = [
    "requests",
]
infoblox = [
    "dnspython",
]
ipfabric = [
    "httpx",
    "ipfabric",
    "ipfabric-diagrams",
    "netutils",
]
# pysnow = "^0.7.17"
# PySNow is currently pinned to an older version of pytz as a dependency, which blocks compatibility with newer
# versions of Nautobot. See https://github.com/rbw/pysnow/pull/186
# For now, we have embedded a copy of PySNow under nautobot_ssot/integrations/servicenow/third_party/pysnow;
# here are its direct packaging dependencies:
pysnow = [
    "requests",
    "oauthlib",
    "python-magic",
    "requests-oauthlib",
    "six",
    "ijson",
    "pytz",
]
servicenow = [
    "Jinja2",
    "PyYAML",
    "ijson",
    "oauthlib",
    "python-magic",
    "pytz",
    "requests",
    "requests-oauthlib",
    "six",
]
nautobot-device-lifecycle-mgmt = [
    "nautobot-device-lifecycle-mgmt",
]

[tool.pylint.master]
# Include the pylint_django plugin to avoid spurious warnings about Django patterns
load-plugins="pylint_django, pylint_nautobot"
ignore=".venv"

[tool.pylint.basic]
# No docstrings required for private methods (Pylint default), or for test_ functions, or for inner Meta classes.
no-docstring-rgx="^(_|test_|Meta$)"

[tool.pylint.message_control]
# TODO: re-enable and fix these as time permits
# unused-import is already covered by ruff
disable=""",
    abstract-method,
    arguments-differ,
    arguments-renamed,
    attribute-defined-outside-init,
    broad-except,
    consider-iterating-dictionary,
    consider-using-from-import,
    consider-using-in,
    consider-using-generator,
    cyclic-import,
    duplicate-code,
    empty-docstring,
    exec-used,
    fixme,
    global-statement,
    global-variable-not-assigned,
    hard-coded-auth-user,
    import-outside-toplevel,
    invalid-name,
    keyword-arg-before-vararg,
    line-too-long,
    logging-format-interpolation,
    logging-fstring-interpolation,
    missing-class-docstring,
    missing-function-docstring,
    missing-module-docstring,
    modelform-uses-exclude,
    no-else-raise,
    no-else-return,
    no-member,
    not-callable,
    pointless-statement,
    pointless-string-statement,
    protected-access,
    raise-missing-from,
    self-assigning-variable,
    signature-differs,
    super-init-not-called,
    super-with-arguments,
    superfluous-parens,
    too-few-public-methods,
    too-many-ancestors,
    too-many-arguments,
    too-many-boolean-expressions,
    too-many-branches,
    too-many-instance-attributes,
    too-many-lines,
    too-many-locals,
    too-many-nested-blocks,
    too-many-public-methods,
    too-many-return-statements,
    too-many-statements,
    ungrouped-imports,
    unnecessary-dunder-call,
    unspecified-encoding,
    unused-argument,
    unused-import,
    unused-wildcard-import,
    use-maxsplit-arg,
    wildcard-import,
    wrong-import-order,
    wrong-import-position,
    """

[tool.pylint.miscellaneous]
# Don't flag TODO as a failure, let us commit with things that still need to be done in the code
notes = """,
    FIXME,
    XXX,
    """

[tool.pylint-nautobot]
supported_nautobot_versions = [
    "2.0.0"
]

[tool.ruff]
line-length = 120
target-version = "py38"
exclude = ["nautobot_ssot/integrations/servicenow/third_party"]

[tool.ruff.lint]
select = [
    "DJ",  # flake8-django
    "E",  # pycodestyle
    "F",  # pyflakes
    # "I",  # isort
    "PIE",  # flake8-pie
    "RUF",  # ruff itself
    "S",  # flake8-bandit
    "W",  # pycodestyle
]
ignore = [
    "E501",  # pycodestyle: line-too-long
    "PIE808",  # unnecessary-range-start
    "RUF012",  # mutable-class-default - see https://github.com/astral-sh/ruff/issues/5243
]

[tool.ruff.lint.isort]
lines-after-imports = 2
force-sort-within-sections = true

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
